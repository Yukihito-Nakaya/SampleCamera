<!DOCTYPE html>
<html lang="ja" class="DEMO">
    <head>
        <meta name="viewport" content="width=device-width,height=device-height,initial-scale=1">
        <meta charset="utf-8">
        <title>DEMO-LPR API-</title>
        <link rel="stylesheet" href="/css/style.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
    </head>
    <body>
        <main>
            <div id="app">
                <section class="section">
                    <div class="container" style="text-align:center">
                        <video ref="video" id="video" width="800" height="450" muted autoplay playsinline ></video>
                        <button id="submit-button" type="button" class="btn btn-primary"></button>
                        <div class="hidden_box">
                            <hr />
                                <div class="result">
                                    <button id="copyTo" class="button is-primary">Copy text</button>
                                    <p class="feedback">
                                        <div class="resfont" contenteditable="true" id="resps">
                                        </div>
                                    </p>
                                </div>
                            <hr />
                        </div>
                        <canvas ref="canvas" id="canvas" width="0" height="0" name="file1" class="nonedisp" ></canvas>
                    </div>
                </section>
            </div>
        </main>
    </body>
    <script>

    const SubmitButton = document.getElementById("submit-button");

      this.video = document.getElementById("video");
      this.canvas = document.getElementById("canvas");

      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices
          .getUserMedia({ video: {
             facingMode: 'environment',
             width:{min:800},
             height:{min:450} 
            } })
          .then((stream) => {
            this.video.srcObject = stream
            this.video.play();
          })
        this.canvas.setAttribute( "width" , 800);
        this.canvas.setAttribute( "height" ,450);

      }

      const selectedFile = function (e) {
        // 選択された File の情報を保存しておく
        e.preventDefault()
        let files = e.target.files
        this.uploadFile = files[0]
      }


    SubmitButton.onclick = () => {  

        this.canvas = document.getElementById("canvas");
        this.canvas.getContext('2d').drawImage(this.video, 0, 0,this.video.clientWidth,this.video.clientHeight);
        let base64 = this.canvas.toDataURL("image/jpeg");
        // base64からBlobデータを作成
        let barr, bin, i, len;
        bin = atob(base64.split("base64,")[1]);
        len = bin.length;
        barr = new Uint8Array(len);
        i = 0;
        while (i < len) {
            barr[i] = bin.charCodeAt(i);
            i++;
        }
        this.blob = new Blob([barr], { type: "image/jpeg" });
        upload();
;
    }

    const upload = function() {
        const formData = new FormData ();
        formData.append('file1', blob, 'image1.jpg')
        const action = "/lpr-api";
        const options = {
            method: 'POST',
            body: formData,
        }

        fetch(action,options).then(response => {
            return response.json();
        })
        .then((json) => {
            this.response_txt = JSON.stringify(json, null , "\t")
            console.log(this.response_txt);
            TextPush();
        })
        .catch(error => {
            console.log(error);
        })
    }

    const TextPush = function(){

        const j = JSON.parse(this.response_txt);
        const time =this.request_time;
        try{
            const cam = j[0]['PLATES'][0];

            const alertrep = `${cam['AREA']} ${cam['CLASS']} ${cam['KANA']} ${cam['DIGITS']} ${cam['KIND']}`;

            const time = j[1];

            const textres1 = document.createElement("span");
            textres1.innerHTML = time + " : " + alertrep;
            const x = document.getElementById('resps');
            x.appendChild(textres1);
        }catch{
            const textres2 = document.createElement("span");
            const time = j[1];
            textres2.innerHTML = time + " : ** *** * **** ** " ;
            const y =  document.getElementById('resps');
            y.appendChild(textres2);
        } 

    }
    const copyToClipboard = document.getElementById("copyTo");

    document.querySelector('#copyTo').addEventListener("click", () =>{
        
        const element = document.querySelector('#resps');
        const selection = window.getSelection();
        const range = document.createRange()
        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);
        console.log('選択された文字列: ', selection.toString());

        const succseeded =  document.execCommand("copy");
        if (succseeded) {

            console.log('コピーできました');
        } else {
            console.log('コピーできませんでした');
        }
        selection.removeAllRanges();

    });

    </script>
</html>

